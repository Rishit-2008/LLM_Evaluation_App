import React, { useState } from "react";
import { fetchResponse as fetchGeminiResponse } from './Gemini';
import { fetchResponse as fetchGPTResponse } from './GPT';
import { evaluateResponse } from './Evaluator';
import './App.css';

const App = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [input, setInput] = useState('');
  const [responses, setResponses] = useState({});
  const [bestResponse, setBestResponse] = useState('');
  const [bestLLM, setBestLLM] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [expandedResponse, setExpandedResponse] = useState(null);
  const [error, setError] = useState('');

  const handleInputChange = (e) => setInput(e.target.value);

  const handleReset = () => {
    setInput('');
    setResponses({});
    setBestResponse('');
    setBestLLM('');
    setError('');
  };

  const handleEvaluateResponses = async () => {
    if (!input.trim()) {
      setError('Please enter a prompt');
      return;
    }

    setIsLoading(true);
    setError('');
    setResponses({});
    setBestResponse('');
    setBestLLM('');

    try {
      const geminiResponse = await fetchGeminiResponse(input);
      const gptResponse = await fetchGPTResponse(input);

      const allResponses = {
        Gemini: geminiResponse,
        GPT: gptResponse
      };

      const evaluation = await evaluateResponse(allResponses);
      setResponses(allResponses);
      setBestResponse(evaluation.bestResponse);
      setBestLLM(evaluation.bestLLM);
    } catch (error) {
      setError('Error during evaluation process. Please try again.');
      console.error("Error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`${isDarkMode ? 'dark' : ''}`}>
      <div className="app-container">
        <header className="header">
          <h1 className="app-title">LLM Response Evaluator</h1>
          <div className="header-buttons">
            <button 
              className="reset-button" 
              onClick={handleReset}
              disabled={!input && Object.keys(responses).length === 0}
            >
              Reset
            </button>
            <button className="theme-toggle" onClick={() => setIsDarkMode(!isDarkMode)}>
              {isDarkMode ? '‚òÄÔ∏è' : 'üåô'}
            </button>
          </div>
        </header>

        <div className="input-section">
          <textarea
            className="prompt-input"
            value={input}
            onChange={handleInputChange}
            placeholder="Enter your prompt here..."
            rows={4}
          />
          <button
            className={`evaluate-button ${isLoading ? 'loading' : ''}`}
            onClick={handleEvaluateResponses}
            disabled={isLoading}
          >
            {isLoading ? 'Evaluating...' : 'Compare Responses'}
          </button>
        </div>

        {error && (
          <div className="error-message">‚ö†Ô∏è {error}</div>
        )}

        <div className="responses-container">
          {Object.entries(responses).map(([model, response]) => (
            <div
              key={model}
              className={`response-card ${model === bestLLM ? 'best-model' : ''}`}
            >
              <div className="response-header">
                <span className="model-name">{model}</span>
                {model === bestLLM && (
                  <span className="best-badge">Best Response</span>
                )}
              </div>
              <div className={`response-content ${expandedResponse === model ? 'expanded' : 'expandable'}`}>
                {response}
              </div>
              <button
                className="expand-button"
                onClick={() => setExpandedResponse(expandedResponse === model ? null : model)}
              >
                {expandedResponse === model ? 'Show Less' : 'Show More'}
              </button>
            </div>
          ))}
        </div>

        {bestResponse && (
          <div className="best-response">
            <h2 className="best-response-title">Best Response</h2>
            <div className="best-response-content">{bestResponse}</div>
            <div className="best-response-model">Generated by {bestLLM}</div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;